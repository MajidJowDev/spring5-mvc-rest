package mjz.springframework.spring5mvcrest.api.v1.mapper;

import mjz.springframework.spring5mvcrest.api.v1.model.CategoryDTO;
import mjz.springframework.spring5mvcrest.domain.Category;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

@Mapper
public interface CategoryMapper {

        //by defining this interface as a Mapper (MapStruct), the implementation of this interface will be generated at
        // runtime (compile time) so the categoryToCategoryDTO gets the props of Category class that are generated by lombok and map
        // them to CategoryDTO prop (the body of the method will be generated automatically by MapStruct in the target -> generated-sources path)
        // as long as property names of the two classes are match the auto binding works perfectly fine, in case of difference in name
        // we need to specify the target and source prop like this example(@Mapping(source = "c_id", target= "id") )
        // Note: if we remove @Data annotation from CategoryDTO class the properties would not bind and only a raw instance of
        //CategoryDTO will be initiated in the generated source
        CategoryMapper INSTANCE = Mappers.getMapper(CategoryMapper.class); // a helper to pass the class in the interface so the Mapper automatically generate the class and give an instance of it


        CategoryDTO categoryToCategoryDTO(Category category);

}

// basically following code is what would be generated at compile (runtime)
/*
@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2022-09-21T08:34:41+0430",
    comments = "version: 1.5.2.Final, compiler: javac, environment: Java 11.0.15.1 (Oracle Corporation)"
)
// since we set MapStruct Compiler arguments to pick the Mapper objects as spring component... so the below @Component
//annotation would be added to the generated class, it would be defined as a spring bean in the spring context
@Component
public class CategoryMapperImpl implements CategoryMapper {

    @Override
    public CategoryDTO categoryToCategoryDTO(Category category) {
        if ( category == null ) {
            return null;
        }

        CategoryDTO categoryDTO = new CategoryDTO();

        categoryDTO.setId( category.getId() );  // if we do not use @Data annotation on CategoryDTO class these properties would not bind
        categoryDTO.setName( category.getName() ); // if we do not use @Data annotation CategoryDTO class these properties would not bind

        return categoryDTO;
    }
}
 */
